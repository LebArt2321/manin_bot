from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, CommandHandler, filters
from .models import models
import os
from dotenv import load_dotenv


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
WEEKDAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
LESSON_TIMES = [
    "8:30-9:10", "9:20-10:00", "10:10-10:50", "11:10-11:50", "12:00-12:40", "12:50-13:30",
    "14:00-14:40", "14:50-15:30", "15:40-16:20", "16:30-17:10", "17:20-18:00", "18:10-18:50"
]

# –î–∏–∞–ª–æ–≥–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
DEL_SELECT_DAY, DEL_SELECT_LESSON, DEL_CONFIRM = range(10, 13)


async def delschedule_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'back_to_main':
        await query.edit_message_text('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        return ConversationHandler.END
    day = query.data
    context.user_data['del_day'] = day
    lessons = models.get_schedule()
    # user-friendly: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    def get_lesson_num(time):
        for i, t in enumerate(LESSON_TIMES):
            if t == time:
                return i + 1
        return None
    lessons_for_day = [(get_lesson_num(time), lesson, time) for d, lesson, time in lessons if d == day]
    lessons_for_day = sorted([l for l in lessons_for_day if l[0] is not None], key=lambda x: x[0])
    if not lessons_for_day:
        await query.edit_message_text('–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.')
        return ConversationHandler.END
    keyboard = [
        [InlineKeyboardButton(f"{num}. {lesson} ({time})", callback_data=str(num-1))] for num, lesson, time in lessons_for_day
    ]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_days')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
    context.user_data['lessons_for_day'] = lessons_for_day
    return DEL_SELECT_LESSON


async def delschedule_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back_to_days':
        keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
        return DEL_SELECT_DAY

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –∏–∑ lessons_for_day
    lessons_for_day = context.user_data['lessons_for_day']
    selected_lesson = next((lesson for num, lesson, time in lessons_for_day if str(num-1) == query.data), None)
    selected_time = next((time for num, lesson, time in lessons_for_day if str(num-1) == query.data), None)
    
    if not selected_lesson or not selected_time:
        await query.edit_message_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return ConversationHandler.END

    day = context.user_data['del_day']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['del_lesson'] = selected_lesson
    context.user_data['del_time'] = selected_time
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await query.edit_message_text(
        f'–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫: {selected_lesson} ({selected_time})?\n–î–µ–Ω—å: {day}',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='yes')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_lessons')]
        ])
    )
    return DEL_CONFIRM

async def delschedule_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back_to_lessons':
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤
        day = context.user_data['del_day']
        lessons = models.get_schedule()
        def get_lesson_num(time):
            for i, t in enumerate(LESSON_TIMES):
                if t == time:
                    return i + 1
            return None
        lessons_for_day = [(get_lesson_num(time), lesson, time) for d, lesson, time in lessons if d == day]
        lessons_for_day = sorted([l for l in lessons_for_day if l[0] is not None], key=lambda x: x[0])
        keyboard = [
            [InlineKeyboardButton(f"{num}. {lesson} ({time})", callback_data=str(num-1))] 
            for num, lesson, time in lessons_for_day
        ]
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_days')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
        return DEL_SELECT_LESSON

    if query.data == 'yes':
        day = context.user_data['del_day']
        lesson = context.user_data['del_lesson']
        time = context.user_data['del_time']
        
        # –ü–æ–ª—É—á–∞–µ–º id —É—Ä–æ–∫–∞ –ø–æ —Ç–æ—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        conn = models.sqlite3.connect(models.DB_PATH)
        cur = conn.cursor()
        cur.execute('SELECT id FROM schedule WHERE day=? AND lesson=? AND time=?', 
                   (day, lesson, time))
        row = cur.fetchone()
        conn.close()
        
        if row:
            schedule_id = row[0]
            models.delete_schedule(schedule_id)
            await query.edit_message_text(f'–£—Ä–æ–∫ {lesson} ({time}) —É–¥–∞–ª—ë–Ω.')
        else:
            await query.edit_message_text('–û—à–∏–±–∫–∞: —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    else:
        await query.edit_message_text('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

async def delschedule_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

async def delschedule_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
    return DEL_SELECT_DAY

async def delschedule_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.callback_query.edit_message_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        return
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
    context.user_data['deleting_lesson'] = True
    keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)


load_dotenv()
def get_admin_ids():
    raw = os.getenv('ADMIN_IDS', '').replace("'","").replace('"',"").strip()
    ids = []
    for i in raw.split(','):
        s = i.strip()
        if s:
            try:
                ids.append(int(s))
            except ValueError:
                pass
    return ids

ADMIN_IDS = get_admin_ids()

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    schedule = models.get_schedule()
    if not schedule:
        await update.message.reply_text('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.')
        return
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    def get_lesson_num(time):
        for i, t in enumerate(LESSON_TIMES):
            if t == time:
                return i + 1
        return None

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if args:
        day_query = args[0].capitalize()
        if day_query not in days:
            await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞')
            return
        lessons = [(get_lesson_num(time), lesson, time) for d, lesson, time in schedule if d == day_query]
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        lessons = sorted([l for l in lessons if l[0] is not None], key=lambda x: x[0])
        if lessons:
            text = f'<b>{day_query}</b>\n'
            for num, lesson, time in lessons:
                text += f'{num}. {lesson} ‚Äî <b>{time}</b>\n'
        else:
            text = f'<b>{day_query}</b>\n–ù–µ—Ç —É—Ä–æ–∫–æ–≤'
            await update.message.reply_text(text, parse_mode='HTML')
            return
    # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
    text = '<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n'
    for day in days:
        text += f'\n<b>{day}</b>\n'
        lessons = [(get_lesson_num(time), lesson, time) for d, lesson, time in schedule if d == day]
        lessons = sorted([l for l in lessons if l[0] is not None], key=lambda x: x[0])
        if lessons:
            for num, lesson, time in lessons:
                text += f'{num}. {lesson} ‚Äî <b>{time}</b>\n'
        else:
            text += '–ù–µ—Ç —É—Ä–æ–∫–æ–≤\n'
    await update.message.reply_text(text, parse_mode='HTML')


# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
SELECT_DAY, SELECT_LESSON, INPUT_NAME, ADD_MORE = range(4)

LESSON_TIMES = [
    "8:30-9:10", "9:20-10:00", "10:10-10:50", "11:10-11:50", "12:00-12:40", "12:50-13:30",
    "14:00-14:40", "14:50-15:30", "15:40-16:20", "16:30-17:10", "17:20-18:00", "18:10-18:50"
]
WEEKDAYS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]

async def addschedule_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"addschedule_start called by user {user_id}")
    if user_id not in ADMIN_IDS:
        await update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        print(f"User {user_id} is not admin. ADMIN_IDS: {ADMIN_IDS}")
        return ConversationHandler.END
    print(f"User {user_id} is admin. Showing days keyboard.")
    keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=reply_markup)
    return SELECT_DAY

async def addschedule_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"addschedule_start_callback called by user {user_id}")
    if user_id not in ADMIN_IDS:
        await update.callback_query.edit_message_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        print(f"User {user_id} is not admin. ADMIN_IDS: {ADMIN_IDS}")
        return
    print(f"User {user_id} is admin. Showing days keyboard.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
    context.user_data['adding_lesson'] = True
    keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=reply_markup)

async def addschedule_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'back_to_main':
        await query.edit_message_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        return ConversationHandler.END
    context.user_data['day'] = query.data
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    lessons = models.get_schedule()
    busy_times = set([time for d, l, time in lessons if d == query.data])
    keyboard = []
    for i, time in enumerate(LESSON_TIMES):
        if time not in busy_times:
            keyboard.append([InlineKeyboardButton(f"{i+1} —É—Ä–æ–∫ ({time})", callback_data=str(i))])
    if not keyboard:
        await query.edit_message_text('–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã.')
        return ConversationHandler.END
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_days')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:', reply_markup=reply_markup)
    return SELECT_LESSON

async def addschedule_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'back_to_days':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
        keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=reply_markup)
        return SELECT_DAY
    lesson_idx = int(query.data)
    context.user_data['lesson_time'] = LESSON_TIMES[lesson_idx]
    context.user_data['lesson_num'] = lesson_idx + 1
    # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    SUBJECTS = [
        "–ë–∏–æ–ª–æ–≥–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–†–ú–ì", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–û–ë–ó–†",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§–∏–∑–∏–∫–∞", "–ü—Ä–æ–µ–∫—Ç"
    ]
    keyboard = [[InlineKeyboardButton(subj, callback_data=subj)] for subj in SUBJECTS]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_lesson')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è {context.user_data["lesson_num"]} —É—Ä–æ–∫–∞ ({context.user_data["lesson_time"]}):', reply_markup=reply_markup)
    return INPUT_NAME

async def addschedule_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ callback_data, –µ—Å–ª–∏ —ç—Ç–æ callback, –∏–Ω–∞—á–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if update.callback_query:
        if update.callback_query.data == 'back_to_lesson':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            day = context.user_data['day']
            lessons = models.get_schedule()
            busy_times = set([time for d, l, time in lessons if d == day])
            keyboard = []
            for i, time in enumerate(LESSON_TIMES):
                if time not in busy_times:
                    keyboard.append([InlineKeyboardButton(f"{i+1} —É—Ä–æ–∫ ({time})", callback_data=str(i))])
            if not keyboard:
                await update.callback_query.edit_message_text('–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã.')
                return ConversationHandler.END
            keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_days')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–ª—è {day}:', reply_markup=reply_markup)
            return SELECT_LESSON
        lesson_name = update.callback_query.data
    else:
        lesson_name = update.message.text.strip()
    day = context.user_data['day']
    time = context.user_data['lesson_time']
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ –ø–æ –¥–Ω—é –∏ –≤—Ä–µ–º–µ–Ω–∏
    existing = [l for d, l, t in models.get_schedule() if d == day and t == time]
    if existing:
        await update.effective_message.reply_text(f'–í —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å —É—Ä–æ–∫: {existing[0]}')
        # –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        if update.callback_query:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)
        return ConversationHandler.END
    models.add_schedule(day, lesson_name, time)
    await update.effective_message.reply_text(f'–î–æ–±–∞–≤–ª–µ–Ω–æ: {day} {lesson_name} {time}')
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—Ä–æ–∫ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
    keyboard = [
        [InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É—Ä–æ–∫', callback_data='add_more')],
        [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è', callback_data='back_to_days')],
        [InlineKeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='finish')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text(
        f'–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {day}!\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?',
        reply_markup=reply_markup
    )
    return ADD_MORE

async def addschedule_add_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'add_more':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ–≥–æ –∂–µ –¥–Ω—è
        day = context.user_data['day']
        lessons = models.get_schedule()
        busy_times = set([time for d, l, time in lessons if d == day])
        keyboard = []
        for i, time in enumerate(LESSON_TIMES):
            if time not in busy_times:
                keyboard.append([InlineKeyboardButton(f"{i+1} —É—Ä–æ–∫ ({time})", callback_data=str(i))])
        if not keyboard:
            await query.edit_message_text('–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã.')
            return ConversationHandler.END
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_days')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–ª—è {day}:', reply_markup=reply_markup)
        return SELECT_LESSON
    elif query.data == 'back_to_days':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
        keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=reply_markup)
        return SELECT_DAY
    elif query.data == 'finish':
        await query.edit_message_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        return ConversationHandler.END

async def addschedule_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

async def delete_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        return
    args = context.args
    if not args:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delschedule <id>')
        return
    schedule_id = int(args[0])
    models.delete_schedule(schedule_id)
    await update.message.reply_text(f'–£–¥–∞–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å id {schedule_id}')

async def edit_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        return
    args = context.args
    if len(args) < 4:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /editschedule <id> <–¥–µ–Ω—å> <—É—Ä–æ–∫> <–≤—Ä–µ–º—è>')
        return
    schedule_id, day, lesson, time = int(args[0]), args[1], args[2], args[3]
    models.edit_schedule(schedule_id, day, lesson, time)
    await update.message.reply_text(f'–ò–∑–º–µ–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å id {schedule_id}')

# –î–∏–∞–ª–æ–≥–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
EDIT_SELECT_DAY, EDIT_SELECT_LESSON, EDIT_INPUT_NAME = range(20, 23)

async def editschedule_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=reply_markup)
    return EDIT_SELECT_DAY

async def editschedule_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.callback_query.edit_message_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        return
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
    context.user_data['editing_lesson'] = True
    keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=reply_markup)

async def editschedule_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'back_to_main':
        await query.edit_message_text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        return ConversationHandler.END
    day = query.data
    context.user_data['edit_day'] = day
    lessons = models.get_schedule()
    # user-friendly: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    def get_lesson_num(time):
        for i, t in enumerate(LESSON_TIMES):
            if t == time:
                return i + 1
        return None
    lessons_for_day = [(get_lesson_num(time), lesson, time) for d, lesson, time in lessons if d == day]
    lessons_for_day = sorted([l for l in lessons_for_day if l[0] is not None], key=lambda x: x[0])
    if not lessons_for_day:
        await query.edit_message_text('–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.')
        return ConversationHandler.END
    keyboard = [
        [InlineKeyboardButton(f"{num}. {lesson} ({time})", callback_data=str(num-1))] for num, lesson, time in lessons_for_day
    ]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_days')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=reply_markup)
    context.user_data['lessons_for_day'] = lessons_for_day
    return EDIT_SELECT_LESSON

async def editschedule_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back_to_days':
        keyboard = [[InlineKeyboardButton(day, callback_data=day)] for day in WEEKDAYS]
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=reply_markup)
        return EDIT_SELECT_DAY

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –∏–∑ lessons_for_day
    lessons_for_day = context.user_data['lessons_for_day']
    selected_lesson = next((lesson for num, lesson, time in lessons_for_day if str(num-1) == query.data), None)
    selected_time = next((time for num, lesson, time in lessons_for_day if str(num-1) == query.data), None)
    
    if not selected_lesson or not selected_time:
        await query.edit_message_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.')
        return ConversationHandler.END

    day = context.user_data['edit_day']
    
    # –ü–æ–ª—É—á–∞–µ–º id —É—Ä–æ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    conn = models.sqlite3.connect(models.DB_PATH)
    cur = conn.cursor()
    cur.execute('SELECT id FROM schedule WHERE day=? AND lesson=? AND time=?', 
                (day, selected_lesson, selected_time))
    row = cur.fetchone()
    conn.close()
    
    if not row:
        await query.edit_message_text('–û—à–∏–±–∫–∞: —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return ConversationHandler.END
        
    schedule_id = row[0]
    context.user_data['edit_schedule_id'] = schedule_id
    context.user_data['edit_lesson_time'] = selected_time

    # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    SUBJECTS = [
        "–ë–∏–æ–ª–æ–≥–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–†–ú–ì", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–û–ë–ó–†",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§–∏–∑–∏–∫–∞", "–ü—Ä–æ–µ–∫—Ç"
    ]
    keyboard = [[InlineKeyboardButton(subj, callback_data=subj)] for subj in SUBJECTS]
    keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_lessons')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f'–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {selected_lesson}\n–í—Ä–µ–º—è: {selected_time}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–∫–∞:',
        reply_markup=reply_markup
    )
    return EDIT_INPUT_NAME

async def editschedule_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ callback_data, –µ—Å–ª–∏ —ç—Ç–æ callback, –∏–Ω–∞—á–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if update.callback_query:
        if update.callback_query.data == 'back_to_lessons':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–∫–∞
            day = context.user_data['edit_day']
            lessons = models.get_schedule()
            def get_lesson_num(time):
                for i, t in enumerate(LESSON_TIMES):
                    if t == time:
                        return i + 1
                return None
            lessons_for_day = [(get_lesson_num(time), lesson, time) for d, lesson, time in lessons if d == day]
            lessons_for_day = sorted([l for l in lessons_for_day if l[0] is not None], key=lambda x: x[0])
            keyboard = [
                [InlineKeyboardButton(f"{num}. {lesson} ({time})", callback_data=str(num-1))] for num, lesson, time in lessons_for_day
            ]
            keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_days')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=reply_markup)
            return EDIT_SELECT_LESSON
        new_name = update.callback_query.data
    else:
        new_name = update.message.text.strip()
    schedule_id = context.user_data['edit_schedule_id']
    day = context.user_data['edit_day']
    time = context.user_data['edit_lesson_time']
    models.edit_schedule(schedule_id, day, new_name, time)
    await update.effective_message.reply_text(f'–£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω: {day} {new_name} {time}')
    # –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
    return ConversationHandler.END

async def editschedule_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

async def clear_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—á–∏—â–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
        return
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    conn = models.sqlite3.connect(models.DB_PATH)
    cur = conn.cursor()
    cur.execute('DELETE FROM schedule')
    conn.commit()
    conn.close()
    await update.message.reply_text('–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.')