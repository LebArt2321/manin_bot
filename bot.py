import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
from bot.db.init_db import init_db, clear_db
from bot.schedule import show_schedule, clear_schedule
from bot.schedule import addschedule_start, addschedule_day, addschedule_lesson, addschedule_name, addschedule_cancel, addschedule_add_more, addschedule_start_callback
from bot.schedule import delschedule_start, delschedule_day, delschedule_lesson, delschedule_confirm, delschedule_cancel, delschedule_start_callback
from bot.schedule import editschedule_start, editschedule_day, editschedule_lesson, editschedule_name, editschedule_cancel, editschedule_start_callback
from bot.menu import get_main_menu, get_schedule_menu, get_days_menu, get_admin_menu, get_clear_confirm_menu, help_menu
from telegram import ReplyKeyboardMarkup, KeyboardButton  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


# ...existing code...

async def handle_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìã –ú–µ–Ω—é":
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=get_main_menu()
        )

# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text(
#         '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –¥–æ–º–∞—à–∫–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
#         # reply_markup=get_main_menu(),
#         reply_markup=help_menu()
#     )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –Ω–∏–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [KeyboardButton("üìã –ú–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –¥–æ–º–∞—à–∫–∏.', 
        reply_markup=reply_markup  # –ù–∏–∂–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
    await update.message.reply_text(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:',
        reply_markup=get_main_menu()  # Inline-–∫–Ω–æ–ø–∫–∏
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
        'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n'
        '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫\n'
        '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫ - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–∫\n'
        'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ - —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫\n'
        'üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!',
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
# async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()
    
#     try:
#         if query.data == "menu_schedule":
#             await query.edit_message_text(
#                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
#                 reply_markup=get_schedule_menu()
#             )
#         elif query.data == "show_schedule":
#             # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#             from bot.models import models
#             schedule = models.get_schedule()
#             if not schedule:
#                 await query.edit_message_text(
#                     'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
#                     reply_markup=get_schedule_menu()
#                 )
#                 return
        
#             days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
#             LESSON_TIMES = [
#                 "8:30-9:10", "9:20-10:00", "10:10-10:50", "11:10-11:50", "12:00-12:40", "12:50-13:30",
#                 "14:00-14:40", "14:50-15:30", "15:40-16:20", "16:30-17:10", "17:20-18:00", "18:10-18:50"
#             ]
            
#             def get_lesson_num(time):
#                 for i, t in enumerate(LESSON_TIMES):
#                     if t == time:
#                         return i + 1
#                 return None

#             text = '<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n'
#             for day in days:
#                 text += f'\n<b>{day}</b>\n'
#                 lessons = [(get_lesson_num(time), lesson, time) for d, lesson, time in schedule if d == day]
#                 lessons = sorted([l for l in lessons if l[0] is not None], key=lambda x: x[0])
#                 if lessons:
#                     for num, lesson, time in lessons:
#                         text += f'{num}. {lesson} ‚Äî <b>{time}</b>\n'
#                 else:
#                     text += '–ù–µ—Ç —É—Ä–æ–∫–æ–≤\n'
            
#             await query.edit_message_text(
#                 f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#                 parse_mode='HTML',
#                 reply_markup=get_schedule_menu()
#             )
#         elif query.data == "show_schedule_day":
#             await query.edit_message_text(
#                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
#                 reply_markup=get_days_menu()
#             )
async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "menu_schedule":
            # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            from bot.models import models
            schedule = models.get_schedule()
            if not schedule:
                await query.edit_message_text(
                    'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.',
                    reply_markup=get_schedule_menu()
                )
                return
            
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
            LESSON_TIMES = [
                "8:30-9:10", "9:20-10:00", "10:10-10:50", "11:10-11:50", "12:00-12:40", "12:50-13:30",
                "14:00-14:40", "14:50-15:30", "15:40-16:20", "16:30-17:10", "17:20-18:00", "18:10-18:50"
            ]
            
            def get_lesson_num(time):
                for i, t in enumerate(LESSON_TIMES):
                    if t == time:
                        return i + 1
                return None

            text = '<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n'
            for day in days:
                text += f'\n<b>{day}</b>\n'
                lessons = [(get_lesson_num(time), lesson, time) for d, lesson, time in schedule if d == day]
                lessons = sorted([l for l in lessons if l[0] is not None], key=lambda x: x[0])
                if lessons:
                    for num, lesson, time in lessons:
                        text += f'{num}. {lesson} ‚Äî <b>{time}</b>\n'
                else:
                    text += '–ù–µ—Ç —É—Ä–æ–∫–æ–≤\n'
            
            await query.edit_message_text(
                text,
                parse_mode='HTML',
                reply_markup=get_schedule_menu()
            )
        elif query.data == "menu_add_lesson":
            # await addschedule_start_callback(update, context)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ adding_lesson
            context.user_data['adding_lesson'] = True
            # –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏
            context.user_data.pop('editing_lesson', None)
            context.user_data.pop('deleting_lesson', None)
            await addschedule_start_callback(update, context)
        elif query.data == "add_lesson":
            await addschedule_start_callback(update, context)
        elif query.data == "menu_edit_lesson":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ editing_lesson
            context.user_data['editing_lesson'] = True
            # –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏
            context.user_data.pop('adding_lesson', None)
            context.user_data.pop('deleting_lesson', None)
            await editschedule_start_callback(update, context)
            # await editschedule_start_callback(update, context)
        elif query.data == "edit_lesson":
            await editschedule_start_callback(update, context)
        elif query.data == "menu_delete_lesson":
            # await delschedule_start_callback(update, context)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ deleting_lesson
            context.user_data['deleting_lesson'] = True
            # –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏  
            context.user_data.pop('adding_lesson', None)
            context.user_data.pop('editing_lesson', None)
            await delschedule_start_callback(update, context)
            
        elif query.data == "delete_lesson":
            await delschedule_start_callback(update, context)
        elif query.data == "menu_clear_schedule":
            await query.edit_message_text(
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                reply_markup=get_clear_confirm_menu()
            )
        elif query.data == "clear_schedule":
            await query.edit_message_text(
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                reply_markup=get_clear_confirm_menu()
            )
        elif query.data == "confirm_clear":
            # –û—á–∏—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            from bot.models import models
            conn = models.sqlite3.connect(models.DB_PATH)
            cur = conn.cursor()
            cur.execute('DELETE FROM schedule')
            conn.commit()
            conn.close()
            await query.edit_message_text(
                "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–æ!",
                reply_markup=get_main_menu()
            )
        elif query.data == "cancel_clear":
            await query.edit_message_text(
                "–û—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )
        elif query.data == "menu_help":
            await query.edit_message_text(
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n'
                '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫\n'
                '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫ - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–∫\n'
                'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ - —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫\n'
                'üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n'
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!',
                reply_markup=get_main_menu()
            )
        elif query.data == "back_to_main":
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            if hasattr(context, 'user_data'):
                context.user_data.pop('adding_lesson', None)
                context.user_data.pop('deleting_lesson', None)
                context.user_data.pop('editing_lesson', None)
            await query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu()
            )
        elif query.data == "back_to_schedule_menu":
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
                reply_markup=get_schedule_menu()
            )
        elif query.data.startswith("day_"):
            day = query.data.replace("day_", "")
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
            from bot.models import models
            schedule = models.get_schedule()
            LESSON_TIMES = [
                "8:30-9:10", "9:20-10:00", "10:10-10:50", "11:10-11:50", "12:00-12:40", "12:50-13:30",
                "14:00-14:40", "14:50-15:30", "15:40-16:20", "16:30-17:10", "17:20-18:00", "18:10-18:50"
            ]
            
            def get_lesson_num(time):
                for i, t in enumerate(LESSON_TIMES):
                    if t == time:
                        return i + 1
                return None

            lessons = [(get_lesson_num(time), lesson, time) for d, lesson, time in schedule if d == day]
            lessons = sorted([l for l in lessons if l[0] is not None], key=lambda x: x[0])
            
            if lessons:
                text = f'<b>{day}</b>\n'
                for num, lesson, time in lessons:
                    text += f'{num}. {lesson} ‚Äî <b>{time}</b>\n'
            else:
                text = f'<b>{day}</b>\n–ù–µ—Ç —É—Ä–æ–∫–æ–≤'
            
            await query.edit_message_text(
                f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=get_schedule_menu()
            )
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
        elif query.data in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
            if hasattr(context, 'user_data') and 'adding_lesson' in context.user_data:
                await addschedule_day(update, context)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
            elif hasattr(context, 'user_data') and 'deleting_lesson' in context.user_data:
                await delschedule_day(update, context)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
            elif hasattr(context, 'user_data') and 'editing_lesson' in context.user_data:
                await editschedule_day(update, context)
            else:
                # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                day = query.data
                from bot.models import models
                schedule = models.get_schedule()
                LESSON_TIMES = [
                    "8:30-9:10", "9:20-10:00", "10:10-10:50", "11:10-11:50", "12:00-12:40", "12:50-13:30",
                    "14:00-14:40", "14:50-15:30", "15:40-16:20", "16:30-17:10", "17:20-18:00", "18:10-18:50"
                ]
                
                def get_lesson_num(time):
                    for i, t in enumerate(LESSON_TIMES):
                        if t == time:
                            return i + 1
                    return None

                lessons = [(get_lesson_num(time), lesson, time) for d, lesson, time in schedule if d == day]
                lessons = sorted([l for l in lessons if l[0] is not None], key=lambda x: x[0])
                
                if lessons:
                    text = f'<b>{day}</b>\n'
                    for num, lesson, time in lessons:
                        text += f'{num}. {lesson} ‚Äî <b>{time}</b>\n'
                else:
                    text = f'<b>{day}</b>\n–ù–µ—Ç —É—Ä–æ–∫–æ–≤'
                
                await query.edit_message_text(
                    f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode='HTML',
                    reply_markup=get_schedule_menu()
                )
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–∫–∞ (—Ü–∏—Ñ—Ä—ã 0-11)
        elif query.data.isdigit() and 0 <= int(query.data) <= 11:
            if hasattr(context, 'user_data') and 'adding_lesson' in context.user_data:
                await addschedule_lesson(update, context)
            elif hasattr(context, 'user_data') and 'deleting_lesson' in context.user_data:
                await delschedule_lesson(update, context)
            elif hasattr(context, 'user_data') and 'editing_lesson' in context.user_data:
                await editschedule_lesson(update, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
        elif query.data in ["–ë–∏–æ–ª–æ–≥–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê–ª–≥–µ–±—Ä–∞", "–†–ú–ì", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                           "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–û–ë–ó–†",
                           "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§–∏–∑–∏–∫–∞", "–ü—Ä–æ–µ–∫—Ç"]:
            if hasattr(context, 'user_data') and 'adding_lesson' in context.user_data:
                await addschedule_name(update, context)
            elif hasattr(context, 'user_data') and 'editing_lesson' in context.user_data:
                await editschedule_name(update, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö callback-–æ–≤
        elif query.data in ['add_more', 'back_to_days', 'finish', 'back_to_lesson', 'back_to_lessons', 'yes', 'back']:
            if hasattr(context, 'user_data') and 'adding_lesson' in context.user_data:
                if query.data in ['add_more', 'back_to_days', 'finish']:
                    await addschedule_add_more(update, context)
                elif query.data == 'back_to_lesson':
                    await addschedule_name(update, context)
            elif hasattr(context, 'user_data') and 'deleting_lesson' in context.user_data:
                if query.data in ['back_to_days', 'back_to_lessons', 'yes']:
                    await delschedule_confirm(update, context)
            elif hasattr(context, 'user_data') and 'editing_lesson' in context.user_data:
                if query.data in ['back_to_lesson', 'back', 'back_to_days']:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
                    await editschedule_start_callback(update, context)
    except Exception as e:
        print(f"Error in handle_menu_callback: {e}")
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )

# ...existing code...



if __name__ == '__main__':
    load_dotenv()
    # init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
    # clear_db()  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ë–î
    TOKEN = os.getenv('TG_TOKEN')
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
            reply_markup=get_schedule_menu()
        )
    app.add_handler(CommandHandler('schedule', schedule_command))
    app.add_handler(CommandHandler('clearschedule', clear_schedule))
    app.add_handler(CallbackQueryHandler(handle_menu_callback))

    async def addschedule_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"addscheduletest called by user {update.effective_user.id}")
        await update.message.reply_text('–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /addscheduletest —Å—Ä–∞–±–æ—Ç–∞–ª!')
    app.add_handler(CommandHandler('addscheduletest', addschedule_test))
    from telegram.ext import ConversationHandler, CallbackQueryHandler, MessageHandler, filters
    from bot.schedule import SELECT_DAY, SELECT_LESSON, INPUT_NAME, ADD_MORE
    from bot.schedule import DEL_SELECT_DAY, DEL_SELECT_LESSON, DEL_CONFIRM
    from bot.schedule import EDIT_SELECT_DAY, EDIT_SELECT_LESSON, EDIT_INPUT_NAME
    addschedule_conv = ConversationHandler(
        entry_points=[CommandHandler('addschedule', addschedule_start)],
        states={
            SELECT_DAY: [CallbackQueryHandler(addschedule_day)],
            SELECT_LESSON: [CallbackQueryHandler(addschedule_lesson)],
            INPUT_NAME: [CallbackQueryHandler(addschedule_name)],
            ADD_MORE: [CallbackQueryHandler(addschedule_add_more)]
        },
        fallbacks=[CommandHandler('cancel', addschedule_cancel)],
    )
    delschedule_conv = ConversationHandler(
        entry_points=[CommandHandler('delschedule', delschedule_start)],
        states={
            DEL_SELECT_DAY: [CallbackQueryHandler(delschedule_day)],
            DEL_SELECT_LESSON: [CallbackQueryHandler(delschedule_lesson)],
            DEL_CONFIRM: [CallbackQueryHandler(delschedule_confirm)]
        },
        fallbacks=[CommandHandler('cancel', delschedule_cancel)],
    )
    app.add_handler(addschedule_conv)
    app.add_handler(delschedule_conv)
    editschedule_conv = ConversationHandler(
        entry_points=[CommandHandler('editschedule', editschedule_start)],
        states={
            EDIT_SELECT_DAY: [CallbackQueryHandler(editschedule_day)],
            EDIT_SELECT_LESSON: [CallbackQueryHandler(editschedule_lesson)],
            EDIT_INPUT_NAME: [CallbackQueryHandler(editschedule_name)]
        },
        fallbacks=[CommandHandler('cancel', editschedule_cancel)],
    )
    app.add_handler(editschedule_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_button))
    # ...existing homework handlers...
    app.run_polling()
